#!/bin/bash
:<<'```bash'
[view this file as Markdow](https://github.com/tibolpol/sealgood/blob/develop/docs/fr/filetypes.md)
```bash
#####################################################
# Copyright (c) 2025 Thibault Le Paul (@tibolpol)   #
# Licence MIT - https://opensource.org/license/mit/ #
#                                                   #
# Fonctions dépendantes des formats pris en charge  #
#####################################################
:<<'```bash'
```
## <a id=lookup>lookup</a>: Scan l'input pour valider les actions
```mermaid
flowchart TB
l0((0)) -->|payload+data| raw_input[/lookup.$1/]
$1 -.->|suffix| lookup
subgraph lookup
  raw_input -->|payload+data| t0{{"file -bi"}}
  raw_input -->|payload+data| t1{{check_crypto_file}}
  raw_input -->|payload+data| t2{{file_or_url_list}}
  raw_input -->|payload+data| x0[extract_type]
  t0 -.->|type| x0
  t1 -.->|type| x0
  t2 -.->|type| x0
end
x0 -->|payload| payload[/lookup.$1.payload/]
x0 -->|data| data[/lookup.$1.original/]
x0 -->|unzip| unzip[/lookup.$1.unzip/]
lookup -->|mime-type| l1((1))
click x0 "#extract_type"
click t1 "#check_crypto_file"
click t2 "#file_or_url_list"
```
```bash
###########################################
# Scan l'input pour valider les actions   #
# <$1 : pour nommage de copie de l'entrée #
# <stdin                                  #
# >stdout : type de fichier               #
# >lookup.$1  : copie stdin               #
###########################################
lookup() {
  sfx="${1:-$RANDOM}"
  local result="$(tcat lookup | tee --output-error=warn lookup."$sfx" | file -b -i -)"
  if ! [[ $result =~ /x-empty ]];then
    # find "$PWD"/* -type f -ls >&$fddebug
    # Filetypes jouant sur le parsing de lookup."$sfx".payload
    if [[ $result =~ application/octet-stream ]];then
      if grep -aq '^%PDF-' lookup."$sfx" && grep -aq '^%%EOF' lookup."$sfx" ; then
        result="${result/octet-stream/pdf+octet-stream}"
      else
        result="${result/octet-stream/$(check_crypto_file "$sfx" "$result")+octet-stream}"
      fi
    fi
    # Parsing & lookup."$sfx".payload lookup."$sfx".original une seule fois
    if ! [ -f lookup."$sfx".payload ];then
      precise_result="$(extract_type "$sfx"  "$result")"
      result="${precise_result:-$result}"
      # fallback
      if ! [ -f lookup."$sfx".payload ];then
        <lookup."$sfx" >lookup."$sfx".payload 28>lookup."$sfx".original \
        awk '/^(<!-- )?### BEGIN SEALGOOD /{ state=1 } { if (state) print; else print >"/dev/fd/28"}/^### END SEALGOOD ###/{state=0}'
      fi
      [ -f lookup."$sfx".unzip ] || cp -l lookup."$sfx".original lookup."$sfx".unzip
      # Check du lookup."$sfx".payload obtenu sinon raz
      if [ -s lookup."$sfx".payload ];then
        if awk '
          !begin && /^(<!-- )?### BEGIN SEALGOOD .*###$/ {begin=FNR}
          /^### END SEALGOOD ###/{end=FNR}
          # exactement 1ère et dernière ligne
          END{
#printf("DEBUG 73 begin=%d end=%d FNR=%d"ORS, begin, end, FNR) >"/dev/stderr"
          exit ! (begin == 1 && end == FNR)}' lookup."$sfx".payload
        then
          local count=$(awk '/^wc *: /{print $5;exit}' lookup."$sfx".payload)
          (( count == 0 || count == $(wc -c <lookup."$sfx".original) )) ||
          rm -f lookup."$sfx".payload lookup."$sfx".original
        else
          rm -f lookup."$sfx".payload lookup."$sfx".original
        fi
      fi
      [ -f lookup."$sfx".original ] || cp -l lookup."$sfx" lookup."$sfx".original
      [ -f lookup."$sfx".payload ] || touch lookup."$sfx".payload
      chmod -w lookup."$sfx" lookup."$sfx".unzip lookup."$sfx".original
    fi
    # Extraction réentrante terminée
    # Filetypes dépendant de l'extraction
    if [[ $result =~ gzip ]];then
      content_filetype="$(mkdir wd;(cd wd&&lookup) <lookup."$sfx".unzip;rm -rf wd)"
      if [[ $content_filetype =~ /(x-)tar ]];then
        result="${result/gzip/tar+gzip}"
      fi
    fi
    [ -s lookup."$sfx".payload ] && result="${result/\//\/sealgood+}"
    [ -s lookup."$sfx" ] || die $LINENO "assert failure"
  fi
  echo "${result/\/+/\/}"
  [ "$sfx" = "$1" ] || rm -f lookup."$sfx"{,.unzip,.payload,.original}
}

:<<'```bash'
```
## <a id=extract_type>extract_type</a>: Extraction de original data & payload selon filetype
Le filetype est d'abord déterminé par [lookup](#lookup) qui dépose
les données dans lookup.$1.
```mermaid
flowchart LR
$1,$2 -.->|suffix&filetype| extract_gzip
$1,$2 -.->|suffix&filetype| extract_html
$1,$2 -.->|suffix&filetype| extract_xml
$1,$2 -.->|suffix&filetype| extract_pdf
$1,$2 -.->|suffix&filetype| extract_plain
lookup[/lookup.$1/] -->|payload+data| extract_gzip
lookup[/lookup.$1/] -->|payload+data| extract_xml
lookup[/lookup.$1/] -->|payload+data| extract_html
lookup[/lookup.$1/] -->|payload+data| extract_pdf
lookup[/lookup.$1/] -->|payload+data| extract_plain
extract_gzip -->|unzip| lookup.$1.unzip[/lookup.$1.unzip/]
extract_html -->|unzip| lookup.$1.unzip
extract_pdf -->|unzip| lookup.$1.unzip
extract_plain -->|unzip| lookup.$1.unzip
extract_xml -->|unzip| lookup.$1.unzip
extract_gzip -->|original| lookup.$1.original[/lookup.$1.original/]
extract_html -->|original| lookup.$1.original
extract_pdf -->|original| lookup.$1.original
extract_plain -->|original| lookup.$1.original
extract_xml -->|original| lookup.$1.original
extract_gzip -->|payload| lookup.$1.payload[/lookup.$1.payload/]
extract_html -->|payload| lookup.$1.payload
extract_pdf -->|payload| lookup.$1.payload
extract_plain -->|payload| lookup.$1.payload
extract_xml -->|payload| lookup.$1.payload
```
```bash
#############################
# <$1: suffixe              #
# <$2: resultat de file -bi #
# <lookup.$1                #
# >lookup.$1.original       #
# >lookup.$1.payload        #
# >lookup.$1.unzip          #
# >?: 0 si $2 match         #
#############################
extract_type() {
  extract_gzip   "$@"  ||
  extract_xml    "$@"  ||
  extract_html   "$@"  ||
  extract_pdf    "$@"  ||
  extract_plain  "$@"
}
extract_gzip(){
  local sfx="$1" result="$2"
  if [[ $result =~ application/gzip ]];then
    (zcat lookup."$sfx" || die $LINENO assert) > lookup."$sfx".unzip
    if grep -aq '### BEGIN SEALGOOD' lookup."$sfx".unzip;then
      # count < dernier wc : x x x
      local count=$(< lookup."$sfx".unzip awk '
        /### BEGIN SEALGOOD /{state=1}
        /### END SEALGOOD /{state=0}
        state && /^wc *: /{count=$5}
        END{if(count) print count}'
      )
      { head -c $count >lookup."$sfx".original 2>/dev/null &&
        zcat >lookup."$sfx".payload 2>/dev/null &&
        zcat lookup."$sfx".original >lookup."$sfx".unzip ||
        rm -f lookup."$sfx".{original,payload}
      } <lookup."$sfx"
    fi
  return 0;else return 1;fi
}
extract_xml(){
  local sfx="$1" result="$2"
  if [[ $result =~ text/xml ]];then
    <lookup."$sfx" >lookup."$sfx".payload 28>lookup."$sfx".original \
    awk '/^<!-- ### BEGIN SEALGOOD /{ state=1 } { if (state) print; else print >"/dev/fd/28"}/^### END SEALGOOD ###/{state=0}'
  return 0;else return 1;fi
}
extract_html(){
  local sfx="$1" result="$2"
  if [[ $result =~ text/html ]];then
    <lookup."$sfx" >lookup."$sfx".payload 28>lookup."$sfx".original \
    awk '/^<!-- ### BEGIN SEALGOOD /{ state=1 } { if (state) print; else print >"/dev/fd/28"}/^### END SEALGOOD ###/{state=0}'
  return 0;else return 1;fi
}
extract_pdf(){
  local sfx="$1" result="$2"
  if [[ $result =~ application/pdf ]];then
    <lookup."$sfx" >lookup."$sfx".payload 28>lookup."$sfx".original \
    awk '/^### BEGIN SEALGOOD /{ state=1 } { if (state) print; else print >"/dev/fd/28"}/^### END SEALGOOD ###/{state=0}'
  return 0;else return 1;fi
}
extract_plain(){
  local sfx="$1" result="$2"
  if [[ $result =~ text/plain ]];then
    if grep -aq '^-----BEGIN' lookup."$sfx";then
      <lookup."$sfx" >lookup."$sfx".payload 28>lookup."$sfx".original \
      awk '/^### BEGIN SEALGOOD /{ state=1 } { if (state) print; else print >"/dev/fd/28"}/^### END SEALGOOD ###/{state=0}'
      echo "${result/plain/$(check_crypto_file "$sfx" "$result")+plain}"
    elif LC_ALL=C grep -aEq '^([^[:space:]]|https?://[^/]).{1,256}[^[:space:]]$' lookup."$sfx";then
      echo "${result/plain/$(check_file_or_url_list "$sfx" "$result")+plain}"
    fi
  return 0;else return 1;fi
}

:<<'```bash'
```
## <a id=inject_type>inject_type</a>: Injection du payload
```mermaid
flowchart LR
$1 -.->|filetype| inject_type{{filetype?}}
lookup.payload[/lookup.inject.payload/] -->|payload| inject_after_eod
lookup.payload -->|payload| inject_xml
lookup.original[/lookup.inject.original/] -->|data| warning
lookup.original -->|data| inject_after_eod
lookup.original -->|data| inject_xml
inject_type -.->|pdf| inject_after_eod
inject_type -.->|xml| inject_xml
inject_type -.->|html| inject_xml
inject_type -.->|gzip| inject_gzip
inject_type -.->|PEM| inject_after_eod
inject_type -.->|None| warning
lookup.$1[/lookup.inject/] -->|payload+data| inject_gzip
inject_after_eod --> l1((1))
inject_xml --> l1
warning --> l1
inject_gzip --> l1
click inject_after_eod "#inject_after_eod"
click inject_html "#inject_html"
click inject_xml "#inject_xml"
click inject_gzip "#inject_gzip"
```
```bash
inject_type() {
    filetype="$1"
    # Le type d'injection dépend de filetype
    if [[ $filetype =~ pdf ]];then
      inject_after_eod
    elif [[ $filetype =~ xml  ]];then
      inject_xml
    elif [[ $filetype =~ html ]];then
      inject_xml
    elif [[ $filetype =~ gzip ]];then
      inject_gzip
    elif [[ $filetype =~ PEM..$(_ "Public key") ]];then
      inject_after_eod
    else
      warning "$(_ "I don't know how to inject into") mimetype: $filetype"
      cat lookup.inject.original
    fi
}
:<<'```bash'
```
## <a id=inject_after_eod>inject_after_eod</a>: Injection d'informations cachées dans une copie du fichier
```mermaid
flowchart TB
od[/lookup.inject.original/]
pl[/lookup.inject.payload/]
od -->|data| inject_after_eod
pl -->|payload| inject_after_eod
inject_after_eod -->|payload+data| l1((1))
```
```bash
##############################################################
# Injection d'informations cachées dans une copie du fichier #
# <lookup.inject.original                                    #
# <lookup.inject.payload                                     #
# >stdout : copie avec payload & PLACEHOLDER                 #
##############################################################
inject_after_eod() {
  cat lookup.inject.{original,payload}
}

:<<'```bash'
```
## <a id=inject_xml>inject_xml</a>: Injection d'informations cachées dans une copie du HTML | XML
```mermaid
flowchart TB
od[/lookup.inject.original/]
pl[/lookup.inject.payload/]
od -->|data| inject_xml
pl -->|payload| inject_xml
inject_xml -->|payload+data| l1((1))
```
```bash
#################################################################
# Injection d'informations cachées dans une copie du HTML | XML #
# <lookup.inject.original                                       #
# <lookup.inject.payload                                        #
# >stdout : copie avec payload & PLACEHOLDER                    #
#################################################################
inject_xml() {
  cat lookup.inject.original
  echo "<!-- $(cat lookup.inject.payload) -->"
}

:<<'```bash'
```
## <a id=inject_gzip>inject_gzip</a>: Injection d'informations cachées dans une copie du gzip
```mermaid
flowchart TB
lookup.inject[/lookup.inject/] -->|payload+data| tee
filetype[filetype=$1] -.-> inject_gzip
subgraph inject_gzip
  tee -->|data| od[/original_data/]
  tee -->|data| get_payload
  od -->|data| get_payload
  get_payload -->|payload+data| gzip
end
gzip -->|payload+data+gzip| l1((1))
click get_payload "sealgood.md#get_payload"
```
```bash
##################################################################
# Injection d'informations cachées dans une copie du gzip        #
# https://www.gnu.org/software/gzip/manual/gzip#Advanced-usage   #
# <$1 : filetype                                                 #
# <lookup.inject                                                 #
# >stdout : copie avec payload & PLACEHOLDER                     #
##################################################################
inject_gzip() {
  {
    tee original_data
    [[ $1 =~ sealgood ]] || get_payload < original_data | gzip -c
  }<lookup.inject
}

:<<'```bash'
```
## <a id=file_or_url_list>file_or_url_list</a>: Lookup file_or_url_list
```bash
###########################################
# Lookup file_or_url_list                 #
# <$1 : pour nommage de copie de l'entrée #
# <$2 : known filetype                    #
# <lookup.$1                              #
# >stdout : type de fichier               #
###########################################
check_file_or_url_list() {
  if [[ $2 =~ text/plain ]] ; then
    echo $(
      cd "$INITIAL_DIR"
      while read -r; do # traitement des noms de fichier ou URL
        is_file_or_url "$REPLY" || return
      done
      echo file_or_url_list
    )
  fi < lookup."$1"
}

:<<'```bash'
```
## <a id=is_file_or_url>is_file_or_url</a>: 1 si url ou si fichier existe
```bash
#######################################
# <$1 : file_or_url                   #
# >$? : 1 si url ou si fichier existe #
#######################################
is_file_or_url() {
  [[ $1 =~ ^https?:// ]] || [ -s "$STOPFILE$1" ]
}

:<<'```bash'
```
## <a id=check_crypto_file>check_crypto_file</a>: Lookup des types de fichier crypto
```bash
###########################################
# Lookup des types de fichier crypto      #
# <$1 : pour nommage de copie de l'entrée #
# <$2 : known filetype                    #
# <lookup.$1                              #
# >stdout : type de fichier               #
###########################################
check_crypto_file() {
  local result=""
  if [[ $2 =~ octet-stream ]] ; then
    if (openssl pkcs12 -password pass: -in lookup."$1" -info -noout;(($?==1 || $?==0))) &>/dev/null ; then
      result="[PKCS#12] $(_ "Key+certificate container")"
    elif (openssl x509 -password pass: -in lookup."$1" -noout;(($?==1 || $?==0))) &>/dev/null; then
      #local algo=$(openssl x509 -password pass: -in lookup."$1" -noout -text | grep "Public Key Algorithm")
      result="[X.509] $(_ "Certificate")"
    elif (openssl pkey -password pass: -in lookup."$1" -noout;(($?==1 || $?==0))) &>/dev/null; then
      #local algo=$(openssl pkey -in "$file" -noout -text | grep "algorithm")
      result="[PKEY] $(_ "Private key")"
    elif (openssl req -password pass: -in lookup."$1" -noout;(($?==1 || $?==0))) &>/dev/null; then
      result="[CSR] $(_ "Certificate signing request")"
    fi
  elif [[ $2 =~ text/plain ]] ; then
    if grep -q "BEGIN CERTIFICATE REQUEST" lookup."$1"; then
      result="[CSR] $(_ "Certificate signing request")"
    elif grep -q "BEGIN OPENSSH PRIVATE KEY" lookup."$1"; then
      result="[OPENSSH] $(_ "Private key")"
    elif grep -q "BEGIN PRIVATE KEY" lookup."$1"; then
      result="[PEM] $(_ "UNENCRYPTED private key")"
    elif grep -q "BEGIN ENCRYPTED PRIVATE KEY" lookup."$1"; then
      result="[PEM] $(_ "ENCRYPTED private key")"
    elif grep -q "BEGIN PUBLIC KEY" lookup."$1"; then
      result="[PEM] $(_ "Public key")"
    elif grep -q "BEGIN RSA PUBLIC KEY" lookup."$1"; then
      result="[RSA] $(_ "Public key")"
    elif grep -q "BEGIN RSA PRIVATE KEY" lookup."$1"; then
      result="[RSA] $(_ "Private key")"
    elif gdalinfo lookup."$1" &>/dev/null; then
      result="$(_ "DEM file (GDAL format)")"
    elif grep -q "BEGIN CERTIFICATE" lookup."$1"; then
      result="[PEM] $(_ "Certificate")"
    fi
  fi
  echo "$result"
}
