#!/usr/bin/env python3
"""
## Serveur localhost adaptant la vue HTTP au plugin Markdown Viewer 

Un fichier sans extension, et contenant du markdown, est servi par une url
avec l'extension .md et le mime-type text/markdown.  [Markdown
Viewer](https://github.com/simov/markdown-viewer) doit être installé et
configuré pour gérer le site http://localhost:8003 et le contenu mermaid.

L'idée est de fusionner la doc avec le source.

github fournit une vue markdown en faisant une copie dans le répertoire de doc
avec l'extension .md et transformation du code, faute de mieux, ça donne une vue
doc + source, à jour par CI/CD.


```mermaid
flowchart TB
    A[HTTP Request] --> B{location exist?}
    B -->|no| F{location without md exist?}
    F -->|yes| G[send 200 + location without md + markdown mime-type]
    B -->|yes| C{location with md exist?}
    C -->|no| D{location is markdown?}
    D -->|yes| E[send 302 + location with md]
    E --> B
    
    style A fill:#f9f,stroke:#333
    style G fill:#bbf,stroke:#333
    style E fill:#fbb,stroke:#333

```
```python
"""
# coding: utf-8
import http.server
import socketserver
import pathlib
import signal
import sys
import re

PORT = 8003
RACINE = pathlib.Path(__file__).parent.parent.resolve()

class Handler(http.server.SimpleHTTPRequestHandler):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, directory=str(RACINE), **kwargs)

  def do_GET(self):

    # Remove leading slash and create Path object
    rel_path = pathlib.Path(self.path[1:])

    if (RACINE / rel_path).exists():
      # redirige sur file.md pour présenter en markdown
      if rel_path.suffix == '' and not (RACINE / rel_path).is_dir() and check_file_pattern(RACINE / rel_path, r'^```', 5):
        self.send_response(302)
        self.send_header('Location', f'/{str(rel_path.with_suffix(".md"))}')
        self.end_headers()
        return

    else:
      # présente file en markdown
      if rel_path.suffix == '.md' and (RACINE / rel_path.with_suffix('')).exists():
        self.send_response(200)
        self.send_header('Content-type', 'text/markdown; charset=utf-8')
        self.end_headers()
        with open(RACINE / rel_path.with_suffix(''), 'rb') as f:
            self.wfile.write(f.read())
        return

    # Default behavior for other files
    super().do_GET()

# bool: fichier contient pattern
def check_file_pattern(filepath: pathlib.Path, pattern: str, max_lines: int = 10) -> bool:
  if filepath.is_file():
    with open(filepath, 'r', encoding='utf-8', errors='replace') as f:
      for _ in range(max_lines):
        line = f.readline()
        if not line:
          break
        elif re.match(pattern, line):
          return True
  return False

# Configure server with address reuse
class ReusableTCPServer(socketserver.TCPServer):
  allow_reuse_address = True

with ReusableTCPServer(("", PORT), Handler) as httpd:
  print(f"Accès aux fichiers Markdown: http://localhost:{PORT}/bin/nomfichier.md")

  def signal_handler(sig, frame):
    print("\nArrêt du serveur...")
    httpd.server_close()
    sys.exit(0)

  signal.signal(signal.SIGINT, signal_handler)  # CTRL-C
  signal.signal(signal.SIGTERM, signal_handler)  # kill command

  try:
    httpd.serve_forever()
  except KeyboardInterrupt:
    signal_handler(None, None)
