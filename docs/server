#!/usr/bin/env python3
# coding: utf-8
import http.server
import socketserver
import pathlib
import signal
import sys
import re

PORT = 8002
RACINE = pathlib.Path(__file__).parent.parent.resolve()

class Handler(http.server.SimpleHTTPRequestHandler):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, directory=str(RACINE), **kwargs)

  def do_GET(self):

    # Remove leading slash and create Path object
    rel_path = pathlib.Path(self.path[1:])

    if (RACINE / rel_path).exists():
      # redirige sur file.md pour présenter en markdown
      if rel_path.suffix == '' and not (RACINE / rel_path).is_dir() and check_file_pattern(RACINE / rel_path, r'^```', 5):
        self.send_response(301)
        self.send_header('Location', f'/{str(rel_path.with_suffix(".md"))}')
        self.end_headers()
        return

    else:
      # présente file en markdown
      if rel_path.suffix == '.md' and (RACINE / rel_path.with_suffix('')).exists():
        self.send_response(200)
        self.send_header('Content-type', 'text/markdown; charset=utf-8')
        self.end_headers()
        with open(RACINE / rel_path.with_suffix(''), 'rb') as f:
            self.wfile.write(f.read())
        return

    # Default behavior for other files
    super().do_GET()

# Si le fichier contient un pattern
def check_file_pattern(filepath, pattern, max_lines=10):
    with open(filepath, 'r', encoding='utf-8') as f:
        content = ''.join(f.readline() for _ in range(max_lines))
    return re.search(pattern, content) is not None

# Configure server with address reuse
class ReusableTCPServer(socketserver.TCPServer):
  allow_reuse_address = True

with ReusableTCPServer(("", PORT), Handler) as httpd:
  print(f"Accès aux fichiers Markdown: http://localhost:{PORT}/bin/nomfichier.md")

  def signal_handler(sig, frame):
    print("\nArrêt du serveur...")
    httpd.server_close()
    sys.exit(0)

  signal.signal(signal.SIGINT, signal_handler)  # CTRL-C
  signal.signal(signal.SIGTERM, signal_handler)  # kill command
  
  try:
    httpd.serve_forever()
  except KeyboardInterrupt:
    signal_handler(None, None)
